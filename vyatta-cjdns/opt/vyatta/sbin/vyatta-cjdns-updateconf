#!/usr/bin/python
#
# vyatta-cjdns - A cjdns package for Ubiquiti EdgeOS, VyOS and other
# Vyatta-based systems.
# Copyright (C) 2015 Neil Alexander T.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import json
import sys

data = {}

with open('/config/cjdroute.' + sys.argv[1] + '.conf') as data_file:
    data = json.load(data_file)

def setStandardConfiguration(interface):
    data['logging']['logTo'] = ""
    data['noBackground'] = 1
    data['interfaces']['UDPInterface'] = []
    data['interfaces']['ETHInterface'] = []
    data['authorizedPasswords'] = []
    data['router']['interface']['tunDevice'] = interface
    data['admin']['bind'] = "127.0.0.1:" + str(11234 + int(interface[3:]))

def addAuthorizedPassword(user, password):
    deleteAuthorizedPassword(user)
    data['authorizedPasswords'].append(
        { "user": user, "password": password }
    )

def updateAuthorizedPassword(user, password):
    for i in range(len(data['authorizedPasswords'])):
        if data['authorizedPasswords'][i]['user'] == user:
            data['authorizedPasswords'][i]['password'] = password

def deleteAuthorizedPassword(user):
    for i in range(len(data['authorizedPasswords'])):
        if data['authorizedPasswords'][i]['user'] == user:
            del data['authorizedPasswords'][i]

def addUDPInterface(interface):
    if int(interface) > len(data['interfaces']['UDPInterface']):
        print "Invalid interface ID; must be in sequence with previous interface"
    else:
        try:
            assert data['interfaces']['UDPInterface'][int(interface)] is not dict
        except IndexError:
            data['interfaces']['UDPInterface'].insert(int(interface), {})
        finally:
            data['interfaces']['UDPInterface'][int(interface)] = {
                "bind": "",
                "connectTo": {}
            }

def deleteUDPInterface(interface):
    if int(interface) >= len(data['interfaces']['UDPInterface']):
        print "Invalid interface ID; must be a configured interface ID"
    else:
        if type(data['interfaces']['UDPInterface'][int(interface)]) is dict:
            data['interfaces']['UDPInterface'][int(interface)] = {}

def addUDPConnectTo(interface, endpoint):
    data['interfaces']['UDPInterface'][int(interface)]['connectTo'][endpoint] = {}

def updateUDPConnectToPublicKey(interface, endpoint, publicKey):
    if endpoint not in data['interfaces']['UDPInterface'][0]['connectTo']:
        data['interfaces']['UDPInterface'][int(interface)]['connectTo'][endpoint] = {}
    data['interfaces']['UDPInterface'][int(interface)]['connectTo'][endpoint]['publicKey'] = publicKey

def updateUDPConnectToLogin(interface, endpoint, login):
    if endpoint not in data['interfaces']['UDPInterface'][0]['connectTo']:
        data['interfaces']['UDPInterface'][int(interface)]['connectTo'][endpoint] = {}
    data['interfaces']['UDPInterface'][int(interface)]['connectTo'][endpoint]['login'] = login

def updateUDPConnectToPeerName(interface, endpoint, peerName):
    if endpoint not in data['interfaces']['UDPInterface'][0]['connectTo']:
        data['interfaces']['UDPInterface'][int(interface)]['connectTo'][endpoint] = {}
    data['interfaces']['UDPInterface'][int(interface)]['connectTo'][endpoint]['peerName'] = peerName

def updateUDPConnectToPassword(interface, endpoint, password):
    if endpoint not in data['interfaces']['UDPInterface'][0]['connectTo']:
        data['interfaces']['UDPInterface'][int(interface)]['connectTo'][endpoint] = {}
    data['interfaces']['UDPInterface'][int(interface)]['connectTo'][endpoint]['password'] = password

def deleteUDPConnectTo(interface, endpoint):
    del data['interfaces']['UDPInterface'][int(interface)]['connectTo'][endpoint]

def updateUDPBindTo(interface, endpoint):
    data['interfaces']['UDPInterface'][int(interface)]['bind'] = endpoint

def addEthernetInterface(interface):
    if int(interface) > len(data['interfaces']['ETHInterface']):
        print "Invalid interface ID; must be in sequence with previous interface"
    else:
        try:
            assert data['interfaces']['ETHInterface'][int(interface)] is not dict
        except IndexError:
            data['interfaces']['ETHInterface'].insert(int(interface), {})
        finally:
            data['interfaces']['ETHInterface'][int(interface)] = {
                "bind": "",
                "beacon": "",
                "connectTo": {}
            }

def updateEthernetBindTo(interface, endpoint):
    data['interfaces']['ETHInterface'][int(interface)]['bind'] = endpoint

def updateEthernetBeacon(interface, beaconmode):
    if beaconmode == "none":
        data['interfaces']['ETHInterface'][int(interface)]['beacon'] = 0
    elif beaconmode == "listen":
        data['interfaces']['ETHInterface'][int(interface)]['beacon'] = 1
    elif beaconmode == "listen-send":
        data['interfaces']['ETHInterface'][int(interface)]['beacon'] = 2
    else:
        data['interfaces']['ETHInterface'][int(interface)]['beacon'] = int(beaconmode)

def deleteEthernetInterface(interface):
    if int(interface) >= len(data['interfaces']['ETHInterface']):
        print "Invalid interface ID; must be a configured interface ID"
    else:
        if type(data['interfaces']['ETHInterface'][int(interface)]) is dict:
            data['interfaces']['ETHInterface'][int(interface)] = {}

def addIpTunnelConnectTo(publickey):
    if publickey not in data['router']['ipTunnel']['outgoingConnections']:
        data['router']['ipTunnel']['outgoingConnections'].append(publickey)

def deleteIpTunnelConnectTo(publickey):
    data['router']['ipTunnel']['outgoingConnections'].remove(publickey)

def addIpTunnelProviderIPv4Prefix(publickey, ipv4prefix):
    set = 0
    for i in range(len(data['router']['ipTunnel']['allowedConnections'])):
        if data['router']['ipTunnel']['allowedConnections'][i]['publicKey'] == publickey:
            data['router']['ipTunnel']['allowedConnections'][i]['ip4Address'] = ipv4prefix.split("/")[0]
            data['router']['ipTunnel']['allowedConnections'][i]['ip4Prefix'] = int(ipv4prefix.split("/")[1])
            set = 1
    if set == 0:
        data['router']['ipTunnel']['allowedConnections'].append({
          "publicKey": publickey,
          "ip4Address": ipv4prefix.split("/")[0],
          "ip4Prefix": int(ipv4prefix.split("/")[1])
        })

def addIpTunnelProviderIPv6Prefix(publickey, ipv6prefix):
    set = 0
    for i in range(len(data['router']['ipTunnel']['allowedConnections'])):
        if data['router']['ipTunnel']['allowedConnections'][i]['publicKey'] == publickey:
            data['router']['ipTunnel']['allowedConnections'][i]['ip6Address'] = ipv6prefix.split("/")[0]
            data['router']['ipTunnel']['allowedConnections'][i]['ip6Prefix'] = int(ipv6prefix.split("/")[1])
            set = 1
    if set == 0:
        data['router']['ipTunnel']['allowedConnections'].append({
          "publicKey": publickey,
          "ip6Address": ipv6prefix.split("/")[0],
          "ip6Prefix": int(ipv6prefix.split("/")[1])
        })

def deleteIpTunnelProviderIPv4Prefix(publickey):
    for i in range(len(data['router']['ipTunnel']['allowedConnections'])):
        if data['router']['ipTunnel']['allowedConnections'][i]['publicKey'] == publickey:
            try:
                del data['router']['ipTunnel']['allowedConnections'][i]['ip4Address']
                del data['router']['ipTunnel']['allowedConnections'][i]['ip4Prefix']
            except KeyError:
                print "IPv4 prefix already missing from config, ignoring"
            try:
                assert data['router']['ipTunnel']['allowedConnections'][i]['ip6Address']
            except KeyError:
                del data['router']['ipTunnel']['allowedConnections'][i]

def deleteIpTunnelProviderIPv6Prefix(publickey):
    for i in range(len(data['router']['ipTunnel']['allowedConnections'])):
        if data['router']['ipTunnel']['allowedConnections'][i]['publicKey'] == publickey:
            try:
                del data['router']['ipTunnel']['allowedConnections'][i]['ip6Address']
                del data['router']['ipTunnel']['allowedConnections'][i]['ip6Prefix']
            except KeyError:
                print "IPv6 prefix already missing from config, ignoring"
            try:
                assert data['router']['ipTunnel']['allowedConnections'][i]['ip4Address']
            except KeyError:
                del data['router']['ipTunnel']['allowedConnections'][i]

def updateAdminBindAddress(address):
    data['admin']['bind'] = address

def updateAdminPassword(password):
    data['admin']['password'] = password

def updatePublicKey(publicKey):
    data['publicKey'] = publicKey

def updatePrivateKey(privateKey):
    data['privateKey'] = privateKey

def updateIPv6Address(address):
    data['ipv6'] = address

def updateTunDevice(device):
    data['router']['interface']['type'] = "TUNInterface"
    data['router']['interface']['tunDevice'] = device

try:
    if sys.argv[2] == "setStandardConfiguration": setStandardConfiguration(sys.argv[1])
    if sys.argv[2] == "addAuthorizedPassword": addAuthorizedPassword(sys.argv[3], sys.argv[4])
    if sys.argv[2] == "updateAuthorizedPassword": updateAuthorizedPassword(sys.argv[3], sys.argv[4])
    if sys.argv[2] == "deleteAuthorizedPassword": deleteAuthorizedPassword(sys.argv[3])
    if sys.argv[2] == "addUDPInterface": addUDPInterface(sys.argv[3])
    if sys.argv[2] == "deleteUDPInterface": deleteUDPInterface(sys.argv[3])
    if sys.argv[2] == "addUDPConnectTo": addUDPConnectTo(sys.argv[3], sys.argv[4])
    if sys.argv[2] == "deleteUDPConnectTo": deleteUDPConnectTo(sys.argv[3], sys.argv[4])
    if sys.argv[2] == "updateUDPConnectToPublicKey": updateUDPConnectToPublicKey(sys.argv[3], sys.argv[4], sys.argv[5])
    if sys.argv[2] == "updateUDPConnectToPassword": updateUDPConnectToPassword(sys.argv[3], sys.argv[4], sys.argv[5])
    if sys.argv[2] == "updateUDPConnectToLogin": updateUDPConnectToLogin(sys.argv[3], sys.argv[4], sys.argv[5])
    if sys.argv[2] == "updateUDPConnectToPeerName": updateUDPConnectToPeerName(sys.argv[3], sys.argv[4], sys.argv[5])
    if sys.argv[2] == "updateUDPBindTo": updateUDPBindTo(sys.argv[3], sys.argv[4])
    if sys.argv[2] == "addEthernetInterface": addEthernetInterface(sys.argv[3])
    if sys.argv[2] == "deleteEthernetInterface": deleteEthernetInterface(sys.argv[3])
    if sys.argv[2] == "addIpTunnelConnectTo": addIpTunnelConnectTo(sys.argv[3])
    if sys.argv[2] == "deleteIpTunnelConnectTo": deleteIpTunnelConnectTo(sys.argv[3])
    if sys.argv[2] == "addIpTunnelProviderIPv4Prefix": addIpTunnelProviderIPv4Prefix(sys.argv[3], sys.argv[4])
    if sys.argv[2] == "deleteIpTunnelProviderIPv4Prefix": deleteIpTunnelProviderIPv4Prefix(sys.argv[3])
    if sys.argv[2] == "addIpTunnelProviderIPv6Prefix": addIpTunnelProviderIPv6Prefix(sys.argv[3], sys.argv[4])
    if sys.argv[2] == "deleteIpTunnelProviderIPv6Prefix": deleteIpTunnelProviderIPv6Prefix(sys.argv[3])
    if sys.argv[2] == "updateEthernetBindTo": updateEthernetBindTo(sys.argv[3], sys.argv[4])
    if sys.argv[2] == "updateEthernetBeacon": updateEthernetBeacon(sys.argv[3], sys.argv[4])
    if sys.argv[2] == "updateAdminBindAddress": updateAdminBindAddress(sys.argv[3])
    if sys.argv[2] == "updateAdminPassword": updateAdminPassword(sys.argv[3])
    if sys.argv[2] == "updatePublicKey": updatePublicKey(sys.argv[3])
    if sys.argv[2] == "updatePrivateKey": updatePrivateKey(sys.argv[3])
    if sys.argv[2] == "updateIPv6Address": updateIPv6Address(sys.argv[3])
    if sys.argv[2] == "updateTunDevice": updateTunDevice(sys.argv[3])
except IndexError:
    print "Incorrect number of parameters supplied"
finally:
    with open('/config/cjdroute.' + sys.argv[1] + '.conf', 'w') as outfile:
        json.dump(data, outfile, indent=4)
