#!/usr/bin/env python
# You may redistribute this program and/or modify it under the terms of
# the GNU General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, sys
import json
import subprocess

from time import sleep

from cjdnsadmin.cjdnsadmin import connect
from cjdnsadmin.publicToIp6 import PublicToIp6_convert

def connecttoadmin(ip='127.0.0.1', port=11234, password=''):
    from cjdnsadmin.cjdnsadmin import connectWithAdminInfo
    return connect(ip, int(port), password)

def disconnect(cjdns):
    cjdns.disconnect()

def sizeof_fmt(num):
    for x in ['B','KB','MB','GB','TB']:
        if num < 1024.0:
            return "%3.1f%s" % (num, x)
        num /= 1024.0

def parseAddr(addr):
    tokens = addr.split('.', 5)
    res = {
        'version': tokens[0].strip('v'),
        'switchLabel': '.'.join(tokens[1:5]),
        'publicKey': tokens[5]
    }
    return res

def peerStats(cjdns,up=False):
    allPeers = []

    i = 0;
    while True:
        ps = cjdns.InterfaceController_peerStats(i);
        peers = ps['peers']
        for p in peers:
            p.update(parseAddr(p['addr']))
            if p['state'] == 'UNRESPONSIVE' and up:
                continue
            allPeers.append(p)
        if (not 'more' in ps):
            break
        i += 1

    for peer in allPeers:
        b_in  = peer['bytesIn']
        b_out = peer['bytesOut']

        print '%s\t%s %s (v%s, %s in, %s out)' % \
        (
            peer['user'],
            PublicToIp6_convert(peer['publicKey']),
            peer['state'],
            peer['version'],
            str(sizeof_fmt(b_in)),
            str(sizeof_fmt(b_out))
        )

    return allPeers

bindaddress = os.popen('/opt/vyatta/sbin/vyatta-cjdns-readconf ' + sys.argv[1] + ' getAdminAddress').read().strip().split(":")
bindpassword = os.popen('/opt/vyatta/sbin/vyatta-cjdns-readconf ' + sys.argv[1] + ' getAdminPassword').read().strip()
cjdns = connecttoadmin(bindaddress[0], bindaddress[1], bindpassword)
peerStats(cjdns);
cjdns.disconnect()
